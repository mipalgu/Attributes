{"abstract":[{"text":"This guide provides an overview of the Attributes package regarding the different features available","type":"text"},{"text":" ","type":"text"},{"text":"to developers.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/Attributes\/documentation\/Attributes\/AttributeTypes","doc:\/\/Attributes\/documentation\/Attributes\/Validators","doc:\/\/Attributes\/documentation\/Attributes\/Triggers","doc:\/\/Attributes\/documentation\/Attributes\/CreatingSchemas"],"generated":true,"title":"Essentials"}],"metadata":{"roleHeading":"Article","modules":[{"name":"Attributes"}],"role":"article","title":"Getting Started"},"kind":"article","primaryContentSections":[{"content":[{"level":2,"anchor":"The-Attributes-Package-at-a-Glance","type":"heading","text":"The Attributes Package at a Glance"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"Attributes"}],"type":"emphasis"},{"text":" package contains several types and protocols for making underlying data used in Graphical User","type":"text"},{"text":" ","type":"text"},{"text":"Interfaces (GUIs) more accessible from different visualisation libraries and graphical frameworks. The primary","type":"text"},{"text":" ","type":"text"},{"text":"purpose of this package is to provide scalability and availability to a wide range of use cases and projects that may","type":"text"},{"text":" ","type":"text"},{"text":"need data represented in a specific way. The ","type":"text"},{"inlineContent":[{"type":"text","text":"Attributes"}],"type":"emphasis"},{"text":" package contains these distinct parts:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attributes"}]}]},{"content":[{"inlineContent":[{"text":"Paths","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Validators","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Triggers"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Schemas and Properties","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"We have provided guides on all of these topics separately, but we will give a quick introduction to each so that you may"},{"type":"text","text":" "},{"type":"text","text":"have an overview of the purpose of each module."}],"type":"paragraph"},{"level":2,"anchor":"Attributes","type":"heading","text":"Attributes"},{"inlineContent":[{"text":"The attributes form the core of this package. An attribute is simply a way of representing some dataâ€™s possible domain of values.","type":"text"},{"text":" ","type":"text"},{"text":"You may think of attributes as a pseudo-type system that restricts data to a specific form. For example, an integer attribute","type":"text"},{"text":" ","type":"text"},{"text":"represents data as numeric integer values. In addition to this restriction, attributes can be one of","type":"text"},{"text":" ","type":"text"},{"text":"two types: ","type":"text"},{"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/LineAttribute","type":"reference","isActive":true},{"text":" or ","type":"text"},{"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/BlockAttribute","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A ","type":"text"},{"code":"LineAttribute","type":"codeVoice"},{"text":" can exist independently without any relation to another attribute type. A ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/LineAttribute","type":"reference"},{"text":" is","type":"text"},{"text":" ","type":"text"},{"text":"also one that you can typically render in one line in your chosen GUI. A ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/BlockAttribute","type":"reference"},{"text":" is the opposite of a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/LineAttribute","type":"reference"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"A ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/BlockAttribute","type":"reference"},{"text":" may (but not necessarily) nest attributes by containing one or more other ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/LineAttribute","type":"reference"},{"text":"s (or recursive ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/BlockAttribute","type":"reference"},{"text":"s).","type":"text"},{"text":" ","type":"text"},{"text":"A ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/BlockAttribute","type":"reference"},{"text":" cannot usually be rendered within a single line but can take up the entire width and height of the element it is","type":"text"},{"text":" ","type":"text"},{"text":"within. Some examples of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/BlockAttribute","type":"reference"},{"text":"s are tables, text blocks, Collections of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/LineAttribute","type":"reference"},{"text":"s and code blocks.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Paths","type":"heading","text":"Paths"},{"inlineContent":[{"type":"text","text":"The paths in this package exist on top of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Swift Key-Paths"}]},{"type":"text","text":". The most common use case for our paths is to mutate attributes existing within a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Root"}]},{"type":"text","text":" object"},{"type":"text","text":" "},{"type":"text","text":"using its equivalent "},{"type":"emphasis","inlineContent":[{"text":"Key-Path","type":"text"}]},{"type":"text","text":". Our Paths, however, provide a means to determine if the path is valid in the root object, removing runtime"},{"type":"text","text":" "},{"type":"text","text":"crashes via a well-defined checking mechanism. These paths can also determine if higher elements in the membership hierarchy are nil (or"},{"type":"text","text":" "},{"type":"text","text":"null-referenced by the key-path). Some examples might include invalid indexes in an array (such as indexes beyond the length of"},{"type":"text","text":" "},{"type":"text","text":"the array) which would usually create index out-of-bounds crashes. The paths may check for these scenarios, and errors are thrown"},{"type":"text","text":" "},{"type":"text","text":"(or results return failures) when suitable."}],"type":"paragraph"},{"inlineContent":[{"text":"Our paths also support two fundamental types of operations: those that can mutate the root object and those that cannot perform mutation.","type":"text"},{"text":" ","type":"text"},{"text":"This distinction is done by using different value types without an inheritance hierarchy using reference types. This method is beneficial as it","type":"text"},{"text":" ","type":"text"},{"text":"protects mutation when not needed and allows referential transparency by default.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Validators","type":"heading","text":"Validators"},{"inlineContent":[{"type":"text","text":"Validators provide the means of performing sanity checking for the underlying data of an attribute. We have designed Validators to"},{"type":"text","text":" "},{"type":"text","text":"be used in a declarative fashion using result builders similar to the style of "},{"type":"emphasis","inlineContent":[{"text":"SwiftUI","type":"text"}]},{"type":"text","text":" views or via function chaining."},{"type":"text","text":" "},{"type":"text","text":"This feature allows users to programmatically combine validators to create custom validation rules without creating a new validator type."},{"type":"text","text":" "},{"type":"text","text":"There is an extensive catalogue of supported validation rules provided in this package. Some examples include: "},{"type":"emphasis","inlineContent":[{"text":"required","type":"text"}]},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"type":"text","text":"max length"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"not nil","type":"text"}]},{"type":"text","text":", etc."}],"type":"paragraph"},{"level":2,"anchor":"Triggers","type":"heading","text":"Triggers"},{"inlineContent":[{"text":"Triggers provide the means of performing some functions when specific events happen within the attribute hierarchy. A trigger will perform","type":"text"},{"text":" ","type":"text"},{"text":"some user-defined function in response to some event that occurred. An example of an event might be the mutation of a specific attribute or","type":"text"},{"text":" ","type":"text"},{"text":"an attribute rendered on-screen by a graphical library. This package provides several pre-defined actions that a developer can use without","type":"text"},{"text":" ","type":"text"},{"text":"creating a custom trigger. Some examples include: ","type":"text"},{"inlineContent":[{"type":"text","text":"when available\/unavailable, perform some function"}],"type":"emphasis"},{"text":", ","type":"text"},{"inlineContent":[{"text":"when changed, perform some function","type":"text"}],"type":"emphasis"},{"text":",","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"apply a change to all elements within a collection"}],"type":"emphasis"},{"text":", etc.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We have designed Triggers to be declarative using result builders similar to the style of "},{"inlineContent":[{"type":"text","text":"SwiftUI"}],"type":"emphasis"},{"type":"text","text":" views or via function chaining. This"},{"type":"text","text":" "},{"type":"text","text":"process allows the developer to programmatically compose triggers enabling the definition of custom triggers from multiple sub-triggers without creating"},{"type":"text","text":" "},{"type":"text","text":"a new trigger type."}],"type":"paragraph"},{"level":2,"anchor":"Schemas-and-Properties","type":"heading","text":"Schemas and Properties"},{"inlineContent":[{"type":"text","text":"The schemas and properties objects provide the means of bringing all the previously discussed topics together. A schema represents the types"},{"type":"text","text":" "},{"type":"text","text":"encapsulated within a view and how they relate. For example, a personâ€™s information form might contain fields for their given name and family name."},{"type":"text","text":" "},{"type":"text","text":"In this case, the developer can create a schema for this view that groups these two attributes together. The developer can optionally define"},{"type":"text","text":" "},{"type":"text","text":"validation and triggers for the fields separately (or together). Each view can be represented as a schema in a declarative fashion by using"},{"type":"text","text":" "},{"type":"text","text":"properties. Properties are simply property wrapper versions of the attributes found within this package. A schema does not contain any data,"},{"type":"text","text":" "},{"type":"text","text":"but provides the means of defining validation and trigger rules for attribute types within a view."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/attributes\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Attributes\/documentation\/Attributes\/GettingStarted"},"hierarchy":{"paths":[["doc:\/\/Attributes\/documentation\/Attributes"]]},"references":{"doc://Attributes/documentation/Attributes/AttributeTypes":{"role":"article","kind":"article","title":"Attribute Types","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/AttributeTypes","url":"\/documentation\/attributes\/attributetypes","type":"topic","abstract":[{"type":"text","text":"This document provides an overview of the different attribute types available to the developer."}]},"doc://Attributes/documentation/Attributes/CreatingSchemas":{"role":"article","kind":"article","title":"Creating Schemas","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/CreatingSchemas","url":"\/documentation\/attributes\/creatingschemas","type":"topic","abstract":[{"type":"text","text":"This tutorial demonstrates how to create a schema for a simple Person view. This guide will also introduce the methods of creating"},{"type":"text","text":" "},{"type":"text","text":"validators and triggers for a view hierarchy."}]},"doc://Attributes/documentation/Attributes/LineAttribute":{"title":"LineAttribute","url":"\/documentation\/attributes\/lineattribute","role":"symbol","navigatorTitle":[{"text":"LineAttribute","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A LineAttribute is an Attribute that is represented without any relation","type":"text"},{"text":" ","type":"text"},{"text":"to other Attributes.","type":"text"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/LineAttribute","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LineAttribute","kind":"identifier"}]},"doc://Attributes/documentation/Attributes/Validators":{"kind":"article","role":"article","type":"topic","title":"Validators","abstract":[{"type":"text","text":"This section describes the validators that are available in the "},{"type":"codeVoice","code":"Attributes"},{"type":"text","text":" module."}],"url":"\/documentation\/attributes\/validators","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/Validators"},"doc://Attributes/documentation/Attributes/BlockAttribute":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/BlockAttribute","title":"BlockAttribute","navigatorTitle":[{"text":"BlockAttribute","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BlockAttribute","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Attributes that contain other attribute types or fill a block pattern."}],"url":"\/documentation\/attributes\/blockattribute"},"doc://Attributes/documentation/Attributes/Triggers":{"type":"topic","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/Triggers","abstract":[{"type":"text","text":"This guide presents the triggers that are available to the user by default."}],"title":"Triggers","role":"article","kind":"article","url":"\/documentation\/attributes\/triggers"},"doc://Attributes/documentation/Attributes":{"abstract":[{"text":"A swift abstraction for defining types of data commonly rendered within a Graphical User Interface (GUI). This package provides","type":"text"},{"text":" ","type":"text"},{"text":"the means to define, validate, and relate different forms of data.","type":"text"}],"url":"\/documentation\/attributes","type":"topic","title":"Attributes","role":"collection","identifier":"doc:\/\/Attributes\/documentation\/Attributes","kind":"symbol"}}}