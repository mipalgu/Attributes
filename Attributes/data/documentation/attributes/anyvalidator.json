{"abstract":[{"text":"A type-erased validator.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/init(_:)-3onsl","doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/init(_:)-5bqkm","doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/init(_:)-7etpi","doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/init(_:)-8tqx8","doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/init(builder:)","doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/init(validate:)"],"title":"Initializers"},{"identifiers":["doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/performValidation(_:)","doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/toNewRoot(path:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/ExpressibleByArrayLiteral-Implementations"],"title":"Default Implementations"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Attributes\/documentation\/Attributes\/OptionalValidator","doc:\/\/Attributes\/documentation\/Attributes\/PathValidator","doc:\/\/Attributes\/documentation\/Attributes\/RequiredValidator","doc:\/\/Attributes\/documentation\/Attributes\/ValidationError","doc:\/\/Attributes\/documentation\/Attributes\/ValidationPushProtocol","doc:\/\/Attributes\/documentation\/Attributes\/Validator","doc:\/\/Attributes\/documentation\/Attributes\/ValidatorBuilder","doc:\/\/Attributes\/documentation\/Attributes\/ValidatorFactory","doc:\/\/Attributes\/documentation\/Attributes\/ValidatorProtocol"],"title":"Validators"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/attributes\/anyvalidator"]}],"relationshipsSections":[{"identifiers":["doc:\/\/Attributes\/s25ExpressibleByArrayLiteralP","doc:\/\/Attributes\/documentation\/Attributes\/ValidatorProtocol"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"metadata":{"role":"symbol","symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyValidator"}],"modules":[{"name":"Attributes"}],"roleHeading":"Structure","navigatorTitle":[{"kind":"identifier","text":"AnyValidator"}],"externalID":"s:10Attributes12AnyValidatorV","title":"AnyValidator"},"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyValidator","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Root","kind":"genericParameter"},{"text":">","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Attributes\/documentation\/Attributes"]]},"kind":"symbol","references":{"doc://Attributes/documentation/Attributes/AnyValidator/init(_:)-7etpi":{"kind":"symbol","role":"symbol","title":"init(_:)","url":"\/documentation\/attributes\/anyvalidator\/init(_:)-7etpi","abstract":[{"text":"Initialise this validator with another validator. This validator will act","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the same way as the given validator but as a type-erased version."}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/init(_:)-7etpi","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic"},"doc://Attributes/documentation/Attributes/PathValidator":{"title":"PathValidator","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathValidator"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/PathValidator","navigatorTitle":[{"kind":"identifier","text":"PathValidator"}],"role":"symbol","type":"topic","abstract":[{"text":"Provides the means to perform validations using ","type":"text"},{"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ReadOnlyPathProtocol","isActive":true,"type":"reference"},{"text":"s. This protocol","type":"text"},{"text":" ","type":"text"},{"text":"allows the dynamic allocation of validation functions to members existing within a root","type":"text"},{"text":" ","type":"text"},{"text":"object by using a key path.","type":"text"}],"kind":"symbol","url":"\/documentation\/attributes\/pathvalidator"},"doc://Attributes/documentation/Attributes/ReadOnlyPathProtocol":{"kind":"symbol","url":"\/documentation\/attributes\/readonlypathprotocol","title":"ReadOnlyPathProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ReadOnlyPathProtocol","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ReadOnlyPathProtocol","type":"topic","abstract":[{"text":"Path to a value that can only be read and never mutated.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"ReadOnlyPathProtocol","kind":"identifier"}]},"doc://Attributes/documentation/Attributes/ValidationPushProtocol":{"abstract":[{"text":"This protocol provides a mechanism for chaining different validators together into a","type":"text"},{"text":" ","type":"text"},{"text":"single validator that can perform a single validation function. This protocol also","type":"text"},{"text":" ","type":"text"},{"text":"forms a basis for defining common validation function such as validating that","type":"text"},{"text":" ","type":"text"},{"text":"collections arenâ€™t empty, or that collections have a specific amount of elements, etc.","type":"text"}],"url":"\/documentation\/attributes\/validationpushprotocol","type":"topic","title":"ValidationPushProtocol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValidationPushProtocol","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidationPushProtocol","navigatorTitle":[{"text":"ValidationPushProtocol","kind":"identifier"}],"kind":"symbol"},"doc://Attributes/documentation/Attributes/ValidatorBuilder":{"kind":"symbol","url":"\/documentation\/attributes\/validatorbuilder","title":"ValidatorBuilder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValidatorBuilder","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidatorBuilder","type":"topic","abstract":[{"text":"A ","type":"text"},{"code":"resultBuilder","type":"codeVoice"},{"text":" for defining multiple validators.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"ValidatorBuilder","kind":"identifier"}]},"doc://Attributes/documentation/Attributes/ValidatorFactory":{"abstract":[{"text":"A simple interface for chaining together different validators. This factory can be reused to create a","type":"text"},{"text":" ","type":"text"},{"text":"validator that may perform the task of several validators chained together. This factory will","type":"text"},{"text":" ","type":"text"},{"text":"store a function to generate a complex validation rule that can be modified\/altered to work with","type":"text"},{"text":" ","type":"text"},{"text":"other validators. When the user is satisfied with the validation rule, this factory may be used","type":"text"},{"text":" ","type":"text"},{"text":"to generate the validator as many times as required by using the ","type":"text"},{"type":"codeVoice","code":"make"},{"text":" function.","type":"text"}],"url":"\/documentation\/attributes\/validatorfactory","type":"topic","title":"ValidatorFactory","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValidatorFactory","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidatorFactory","navigatorTitle":[{"text":"ValidatorFactory","kind":"identifier"}],"kind":"symbol"},"doc://Attributes/documentation/Attributes/AnyValidator/ExpressibleByArrayLiteral-Implementations":{"abstract":[],"title":"ExpressibleByArrayLiteral Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/attributes\/anyvalidator\/expressiblebyarrayliteral-implementations","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/ExpressibleByArrayLiteral-Implementations","kind":"article"},"doc://Attributes/documentation/Attributes/RequiredValidator":{"kind":"symbol","url":"\/documentation\/attributes\/requiredvalidator","title":"RequiredValidator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequiredValidator"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/RequiredValidator","type":"topic","abstract":[{"text":"A validator that requires values to be present (not nil) for a validation rule.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RequiredValidator"}]},"doc://Attributes/documentation/Attributes/AnyValidator/init(builder:)":{"abstract":[{"text":"Initialise this validator with a builder. This initialiser will use the output from","type":"text"},{"text":" ","type":"text"},{"text":"the builder to initialise self.","type":"text"}],"title":"init(builder:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"builder","kind":"externalParam"},{"text":": () -> [","kind":"text"},{"text":"AnyValidator","preciseIdentifier":"s:10Attributes12AnyValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":">])","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/attributes\/anyvalidator\/init(builder:)","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/init(builder:)","kind":"symbol"},"doc://Attributes/documentation/Attributes/AnyValidator/performValidation(_:)":{"abstract":[{"text":"Perform a validation of a root value. This function uses the underlying validation rules specified","type":"text"},{"text":" ","type":"text"},{"text":"in the initialiser.","type":"text"}],"title":"performValidation(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"performValidation","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic","role":"symbol","url":"\/documentation\/attributes\/anyvalidator\/performvalidation(_:)","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/performValidation(_:)","kind":"symbol"},"doc://Attributes/documentation/Attributes/ValidationError":{"navigatorTitle":[{"text":"ValidationError","kind":"identifier"}],"url":"\/documentation\/attributes\/validationerror","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValidationError","kind":"identifier"}],"type":"topic","title":"ValidationError","abstract":[{"text":"ValidationError is an error that occurs when validating.","type":"text"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidationError","kind":"symbol"},"doc://Attributes/s25ExpressibleByArrayLiteralP":{"title":"Swift.ExpressibleByArrayLiteral","type":"unresolvable","identifier":"doc:\/\/Attributes\/s25ExpressibleByArrayLiteralP"},"doc://Attributes/documentation/Attributes/AnyValidator/toNewRoot(path:)":{"abstract":[{"text":"Changes the Root of the validate function to allow for different parameters to be passed to","type":"text"},{"text":" ","type":"text"},{"text":"performValidation. This method acts as a pure function returning a new AnyValidator with the","type":"text"},{"text":" ","type":"text"},{"text":"new Root.","type":"text"}],"title":"toNewRoot(path:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toNewRoot","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewPath","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"path","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NewPath","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AnyValidator","preciseIdentifier":"s:10Attributes12AnyValidatorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"NewPath"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":">"}],"type":"topic","role":"symbol","url":"\/documentation\/attributes\/anyvalidator\/tonewroot(path:)","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/toNewRoot(path:)","kind":"symbol"},"doc://Attributes/documentation/Attributes/AnyValidator/init(_:)-8tqx8":{"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/init(_:)-8tqx8","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"url":"\/documentation\/attributes\/anyvalidator\/init(_:)-8tqx8","type":"topic","abstract":[{"type":"text","text":"Initialise this validator from an array of AnyValidatorâ€™s. This validator will use"},{"type":"text","text":" "},{"type":"text","text":"each validators performValidation function when validating values."}],"kind":"symbol","title":"init(_:)"},"doc://Attributes/documentation/Attributes":{"abstract":[{"text":"A swift abstraction for defining types of data commonly rendered within a Graphical User Interface (GUI). This package provides","type":"text"},{"text":" ","type":"text"},{"text":"the means to define, validate, and relate different forms of data.","type":"text"}],"url":"\/documentation\/attributes","type":"topic","title":"Attributes","role":"collection","identifier":"doc:\/\/Attributes\/documentation\/Attributes","kind":"symbol"},"doc://Attributes/documentation/Attributes/Validator":{"abstract":[{"text":"Container for storing validation functions for values specified with a Path.","type":"text"}],"url":"\/documentation\/attributes\/validator","type":"topic","title":"Validator","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Validator","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/Validator","navigatorTitle":[{"text":"Validator","kind":"identifier"}],"kind":"symbol"},"doc://Attributes/documentation/Attributes/ValidatorProtocol":{"kind":"symbol","url":"\/documentation\/attributes\/validatorprotocol","title":"ValidatorProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValidatorProtocol","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidatorProtocol","type":"topic","abstract":[{"text":"Protocol for defining a validation function that can be enacted on a Root object.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"ValidatorProtocol","kind":"identifier"}]},"doc://Attributes/documentation/Attributes/AnyValidator":{"kind":"symbol","url":"\/documentation\/attributes\/anyvalidator","title":"AnyValidator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyValidator","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator","type":"topic","abstract":[{"text":"A type-erased validator.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"AnyValidator","kind":"identifier"}]},"doc://Attributes/documentation/Attributes/AnyValidator/init(_:)-5bqkm":{"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/init(_:)-5bqkm","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"V"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"url":"\/documentation\/attributes\/anyvalidator\/init(_:)-5bqkm","type":"topic","abstract":[{"type":"text","text":"Initialise this AnyValidator from an array of generic Validators. This init is similar to the"},{"type":"text","text":" "},{"type":"text","text":"AnyValidator Sequence init, except it uses typed versions of a Validator."}],"kind":"symbol","title":"init(_:)"},"doc://Attributes/documentation/Attributes/AnyValidator/init(validate:)":{"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/init(validate:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"validate"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")"}],"url":"\/documentation\/attributes\/anyvalidator\/init(validate:)","type":"topic","abstract":[{"type":"text","text":"Initialise this validator with a validate function."}],"kind":"symbol","title":"init(validate:)"},"doc://Attributes/documentation/Attributes/AnyValidator/init(_:)-3onsl":{"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:10Attributes12AnyValidatorV","text":"AnyValidator"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":">)"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/AnyValidator\/init(_:)-3onsl","abstract":[{"text":"Initialise this validator with another AnyValidator. This is equivalent to a copy","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"constructor."}],"kind":"symbol","title":"init(_:)","url":"\/documentation\/attributes\/anyvalidator\/init(_:)-3onsl","role":"symbol"},"doc://Attributes/documentation/Attributes/OptionalValidator":{"title":"OptionalValidator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionalValidator"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/OptionalValidator","navigatorTitle":[{"kind":"identifier","text":"OptionalValidator"}],"role":"symbol","type":"topic","abstract":[{"text":"Validator that performs validation only when the value is not nil. A nil value does not throw","type":"text"},{"text":" ","type":"text"},{"text":"any errors during a validation. For a validator that throws errors for nil values, see","type":"text"},{"text":" ","type":"text"},{"code":"RequiredValidator","type":"codeVoice"}],"kind":"symbol","url":"\/documentation\/attributes\/optionalvalidator"}}}