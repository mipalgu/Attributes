{"primaryContentSections":[{"kind":"content","content":[{"anchor":"The-Problem","level":2,"type":"heading","text":"The Problem"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We want to create a simple form for a person. This form will have a name, age, and a list of friends the user can add and remove."},{"text":" ","type":"text"},{"text":"This package does not depend on graphical libraries, so we will only present the type information for such a view using Schemas.","type":"text"}]},{"anchor":"The-Architecture","level":2,"type":"heading","text":"The Architecture"},{"type":"paragraph","inlineContent":[{"text":"We will create a schema for a Person view. This schema will have name, age, and friends list attributes. The schema will also","type":"text"},{"text":" ","type":"text"},{"text":"contain triggers for mutating the data in the model and validators for sanitising any data entry the user will perform. The","type":"text"},{"text":" ","type":"text"},{"text":"model will be an object of a particular form that the schema will use. This model will conform to the ","type":"text"},{"code":"Modifiable","type":"codeVoice"},{"text":" protocol,","type":"text"},{"text":" ","type":"text"},{"text":"allowing the schema to mutate the model. This package already provides a ","type":"text"},{"type":"reference","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/Modifiable","isActive":true},{"type":"text","text":" implementation that we will use"},{"type":"text","text":" "},{"type":"text","text":"in this example called "},{"type":"reference","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/EmptyModifiable","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/EmptyModifiable","isActive":true},{"type":"text","text":" struct will treat the person as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"complex attribute"}]},{"type":"text","text":" containing other attributes for the"},{"type":"text","text":" "},{"type":"text","text":"name, age, and friends list. Our schema will also reflect this structure by using a struct that conforms to"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ComplexProtocol","isActive":true},{"type":"text","text":" to represent our person. It is crucial to match the design of our "},{"type":"reference","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/Modifiable","isActive":true},{"type":"text","text":" "},{"type":"text","text":"model with that of our schema. The schema acts as a bridge between the model and the view by defining"},{"type":"text","text":" "},{"type":"text","text":"the type-information within our model. The schema also defines how the type-information relates to other artefacts in our system"},{"type":"text","text":" "},{"type":"text","text":"and the mechanisms triggered when data changes in our attributes."}]},{"anchor":"The-Person-Complex","level":2,"type":"heading","text":"The Person Complex"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since our Person represents a complex attribute, we can define a struct that conforms to "},{"type":"reference","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ComplexProtocol","isActive":true},{"type":"text","text":" to represent this"},{"type":"text","text":" "},{"type":"text","text":"information. This package provides methods for performing declarative programming to determine the structure of our schema."}]},{"code":["\/\/\/ A person struct represented as a Complex.","struct Person: ComplexProtocol {","","    \/\/\/ The search path.","    typealias SearchPath = Path<EmptyModifiable, Attribute>","","    \/\/\/ The data root.","    typealias Root = EmptyModifiable","","    \/\/\/ The attribute root.","    typealias AttributeRoot = Attribute","","    \/\/\/ The first name type information.","    @LineProperty(","        label: \"first_name\",","        validation: { $0.alpha().minLength(1).maxLength(20) }","    )","    var firstName","","    \/\/\/ The last name type information.","    @LineProperty(","        label: \"last_name\",","        validation: { $0.alpha().minLength(1).maxLength(20) }","    )","    var lastName","","    \/\/\/ The age type information.","    @IntegerProperty(","        label: \"age\",","        validation: { $0.between(min: 0, max: 150) }","    )","    var age","","    \/\/\/ A table of friends.","    @TableProperty(","        label: \"friends\",","        columns: [","            TableColumn.line(","                label: \"first_name\",","                validation: .required().alpha().minLength(1).maxLength(20)","            ),","            TableColumn.line(","                label: \"last_name\",","                validation: .required().alpha().minLength(1).maxLength(20)","            )","        ],","        validation: { $0.maxLength(512).minLength(0).unique() }","    )","    var friends","","    \/\/\/ Whether to add a new friend.","    @BoolProperty(label: \"add_friend\")","    var addFriend","","    \/\/\/ A table to create a new friend.","    @TableProperty(","        label: \"new_friend\",","        columns: [","            TableColumn.line(","                label: \"first_name\",","                validation: .required().alpha().minLength(1).maxLength(20)","            ),","            TableColumn.line(","                label: \"last_name\",","                validation: .required().alpha().minLength(1).maxLength(20)","            )","        ],","        validation: { $0.maxLength(1).minLength(0) }","    )","    var newFriend","","    \/\/\/ Hide or display the new friend table.","    @TriggerBuilder<EmptyModifiable>","    var triggers: some TriggerProtocol {","        WhenTrue(","            SchemaAttribute(label: \"add_friend\", type: .bool),","            makeAvailable: SchemaAttribute(","                label: \"new_friend\",","                type: .table(columns: [(\"first_name\", .line), (\"last_name\", .line)])","            )","        )","        WhenFalse(","            SchemaAttribute(label: \"add_friend\", type: .bool),","            makeUnavailable: SchemaAttribute(","                label: \"new_friend\",","                type: .table(columns: [(\"first_name\", .line), (\"last_name\", .line)])","            )","        )","    }","","    \/\/\/ The path to the data represented by this struct.","    let path = Path(EmptyModifiable.self).attributes[0].attributes[\"person\"].wrappedValue","","}"],"syntax":"swift","type":"codeListing"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/attributes\/creatingschemas"]}],"sections":[],"abstract":[{"text":"This tutorial demonstrates how to create a schema for a simple Person view. This guide will also introduce the methods of creating","type":"text"},{"text":" ","type":"text"},{"text":"validators and triggers for a view hierarchy.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Attributes\/documentation\/Attributes\/CreatingSchemas"},"metadata":{"modules":[{"name":"Attributes"}],"role":"article","roleHeading":"Article","title":"Creating Schemas"},"seeAlsoSections":[{"identifiers":["doc:\/\/Attributes\/documentation\/Attributes\/GettingStarted","doc:\/\/Attributes\/documentation\/Attributes\/AttributeTypes","doc:\/\/Attributes\/documentation\/Attributes\/Validators","doc:\/\/Attributes\/documentation\/Attributes\/Triggers"],"generated":true,"title":"Essentials"}],"hierarchy":{"paths":[["doc:\/\/Attributes\/documentation\/Attributes"]]},"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://Attributes/documentation/Attributes/AttributeTypes":{"role":"article","kind":"article","title":"Attribute Types","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/AttributeTypes","url":"\/documentation\/attributes\/attributetypes","type":"topic","abstract":[{"type":"text","text":"This document provides an overview of the different attribute types available to the developer."}]},"doc://Attributes/documentation/Attributes/Attributable":{"type":"topic","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/Attributable","abstract":[{"type":"text","text":"This protocol provides the bare-minimum implementation for a group of attributes"},{"type":"text","text":" "},{"type":"text","text":"that can be validated, triggered, and displayed. An instance of this protocol"},{"type":"text","text":" "},{"type":"text","text":"represents the types of attributes accessible through this interface. Additionally,"},{"type":"text","text":" "},{"type":"text","text":"this protocol defines the validators required for each attribute and all the attributes"},{"type":"text","text":" "},{"type":"text","text":"as a whole. A similar requirement is placed on the triggers, where an instance may define a"},{"type":"text","text":" "},{"type":"text","text":"trigger that reacts to target attributes within this protocol."}],"title":"Attributable","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Attributable"}],"navigatorTitle":[{"kind":"identifier","text":"Attributable"}],"kind":"symbol","url":"\/documentation\/attributes\/attributable"},"doc://Attributes/documentation/Attributes/Modifiable":{"role":"symbol","kind":"symbol","title":"Modifiable","navigatorTitle":[{"text":"Modifiable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Modifiable","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/Modifiable","url":"\/documentation\/attributes\/modifiable","type":"topic","abstract":[{"type":"text","text":"Provides a common means of accessing and mutating data represented using attributes."}]},"doc://Attributes/documentation/Attributes/ComplexProtocol":{"role":"symbol","kind":"symbol","title":"ComplexProtocol","navigatorTitle":[{"text":"ComplexProtocol","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ComplexProtocol","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ComplexProtocol","url":"\/documentation\/attributes\/complexprotocol","type":"topic","abstract":[{"type":"text","text":"A protocol for defining an "},{"type":"reference","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/Attributable","isActive":true},{"type":"text","text":" that represents data using a "},{"type":"codeVoice","code":"complex"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/Attribute","isActive":true},{"type":"text","text":". This protocol allows a cleaner implementation by providing default"},{"type":"text","text":" "},{"type":"text","text":"paths to the respective complex data (both fields and values). To implement"},{"type":"text","text":" "},{"type":"text","text":"this protocol, the user need only provide a container that stores the data"},{"type":"text","text":" "},{"type":"text","text":"and the path to the complex attribute stored within it by setting the"},{"type":"text","text":" "},{"type":"codeVoice","code":"path"},{"type":"text","text":" property of the conforming type. Once these paths are set up, the user"},{"type":"text","text":" "},{"type":"text","text":"must provide the properties within the complex attribute as local properties"},{"type":"text","text":" "},{"type":"text","text":"of the conforming type using the property wrappers for the respective attributes."}]},"doc://Attributes/documentation/Attributes/EmptyModifiable":{"type":"topic","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/EmptyModifiable","abstract":[{"type":"text","text":"A useful utility struct that enables quick testing of modifiable"},{"type":"text","text":" "},{"type":"text","text":"structs that use an attributes and meta data array."}],"title":"EmptyModifiable","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmptyModifiable"}],"navigatorTitle":[{"kind":"identifier","text":"EmptyModifiable"}],"kind":"symbol","url":"\/documentation\/attributes\/emptymodifiable"},"doc://Attributes/documentation/Attributes/Attribute":{"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Attribute","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"All types of Attributes. An attribute is a way of grouping common data"},{"type":"text","text":" "},{"type":"text","text":"types."}],"kind":"symbol","url":"\/documentation\/attributes\/attribute","title":"Attribute","navigatorTitle":[{"text":"Attribute","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/Attribute"},"doc://Attributes/documentation/Attributes/GettingStarted":{"type":"topic","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/GettingStarted","abstract":[{"type":"text","text":"This guide provides an overview of the Attributes package regarding the different features available"},{"type":"text","text":" "},{"type":"text","text":"to developers."}],"title":"Getting Started","role":"article","kind":"article","url":"\/documentation\/attributes\/gettingstarted"},"doc://Attributes/documentation/Attributes/Validators":{"kind":"article","role":"article","type":"topic","title":"Validators","abstract":[{"type":"text","text":"This section describes the validators that are available in the "},{"type":"codeVoice","code":"Attributes"},{"type":"text","text":" module."}],"url":"\/documentation\/attributes\/validators","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/Validators"},"doc://Attributes/documentation/Attributes/Triggers":{"type":"topic","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/Triggers","abstract":[{"type":"text","text":"This guide presents the triggers that are available to the user by default."}],"title":"Triggers","role":"article","kind":"article","url":"\/documentation\/attributes\/triggers"},"doc://Attributes/documentation/Attributes":{"abstract":[{"text":"A swift abstraction for defining types of data commonly rendered within a Graphical User Interface (GUI). This package provides","type":"text"},{"text":" ","type":"text"},{"text":"the means to define, validate, and relate different forms of data.","type":"text"}],"url":"\/documentation\/attributes","type":"topic","title":"Attributes","role":"collection","identifier":"doc:\/\/Attributes\/documentation\/Attributes","kind":"symbol"}}}