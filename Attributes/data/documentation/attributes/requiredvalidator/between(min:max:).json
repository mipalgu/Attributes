{"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Satisfies a validation when a given value is between a minimum and maximum value"},{"type":"text","text":" "},{"text":"inclusively.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Attributes\/documentation\/Attributes\/RequiredValidator\/between(min:max:)"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Attributes\/documentation\/Attributes","doc:\/\/Attributes\/documentation\/Attributes\/RequiredValidator","doc:\/\/Attributes\/documentation\/Attributes\/RequiredValidator\/ValidationPushProtocol-Implementations"]]},"variants":[{"paths":["\/documentation\/attributes\/requiredvalidator\/between(min:max:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"extendedModule":"Attributes","modules":[{"name":"Attributes"}],"role":"symbol","roleHeading":"Instance Method","title":"between(min:max:)","symbolKind":"method","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"between","kind":"identifier"},{"text":"(","kind":"text"},{"text":"min","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"max","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"PushValidator","kind":"typeIdentifier"}],"externalID":"s:10Attributes22ValidationPushProtocolPAASL5ValueRpzrlE7between3min3max0C9ValidatorQzAE_AEtF::SYNTHESIZED::s:10Attributes17RequiredValidatorV"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"between","kind":"identifier"},{"text":"(","kind":"text"},{"text":"min","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"max","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"PushValidator","kind":"typeIdentifier"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new validator that passes when a given value is between "},{"code":"min","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"max","type":"codeVoice"},{"type":"text","text":" inclusively."}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The minimum value that passes the validator.","type":"text"}]}],"name":"min"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The maximum value that passes the validator.","type":"text"}]}],"name":"max"}]}],"references":{"doc://Attributes/documentation/Attributes/RequiredValidator/ValidationPushProtocol-Implementations":{"kind":"article","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/RequiredValidator\/ValidationPushProtocol-Implementations","url":"\/documentation\/attributes\/requiredvalidator\/validationpushprotocol-implementations","title":"ValidationPushProtocol Implementations","abstract":[],"type":"topic","role":"collectionGroup"},"doc://Attributes/documentation/Attributes/RequiredValidator/between(min:max:)":{"title":"between(min:max:)","kind":"symbol","abstract":[{"type":"text","text":"Satisfies a validation when a given value is between a minimum and maximum value"},{"type":"text","text":" "},{"type":"text","text":"inclusively."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"between"},{"kind":"text","text":"("},{"kind":"externalParam","text":"min"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"max"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"PushValidator"}],"type":"topic","url":"\/documentation\/attributes\/requiredvalidator\/between(min:max:)","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/RequiredValidator\/between(min:max:)","role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]}},"doc://Attributes/documentation/Attributes/RequiredValidator":{"kind":"symbol","url":"\/documentation\/attributes\/requiredvalidator","title":"RequiredValidator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequiredValidator"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/RequiredValidator","type":"topic","abstract":[{"text":"A validator that requires values to be present (not nil) for a validation rule.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RequiredValidator"}]},"doc://Attributes/documentation/Attributes":{"abstract":[{"text":"A swift abstraction for defining types of data commonly rendered within a Graphical User Interface (GUI). This package provides","type":"text"},{"text":" ","type":"text"},{"text":"the means to define, validate, and relate different forms of data.","type":"text"}],"url":"\/documentation\/attributes","type":"topic","title":"Attributes","role":"collection","identifier":"doc:\/\/Attributes\/documentation\/Attributes","kind":"symbol"}}}