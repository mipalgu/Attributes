{"sections":[],"hierarchy":{"paths":[["doc:\/\/Attributes\/documentation\/Attributes","doc:\/\/Attributes\/documentation\/Attributes\/ValidationPushProtocol"]]},"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"alphaunderscore"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"PushValidator","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"inlineContent":[{"text":"A new validator that ensures all characters within a given string are alphabetic,","type":"text"},{"text":" ","type":"text"},{"text":"numeric, or underscores.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"text":"Empty strings will pass validation.","type":"text"}],"type":"paragraph"}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/attributes\/validationpushprotocol\/alphaunderscore()"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Attributes\/documentation\/Attributes\/ValidationPushProtocol\/alphaunderscore()"},"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"alphaunderscore"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"PushValidator","kind":"typeIdentifier"}],"roleHeading":"Instance Method","symbolKind":"method","extendedModule":"Attributes","title":"alphaunderscore()","role":"symbol","modules":[{"name":"Attributes"}],"externalID":"s:10Attributes22ValidationPushProtocolPAASy5ValueRpzrlE15alphaunderscore0C9ValidatorQzyF","conformance":{"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"StringProtocol"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"All characters within a string must be alphabetic (a-z, A-Z), numeric (0-9), or underscores (_).","type":"text"}],"references":{"doc://Attributes/documentation/Attributes":{"abstract":[{"text":"A swift abstraction for defining types of data commonly rendered within a Graphical User Interface (GUI). This package provides","type":"text"},{"text":" ","type":"text"},{"text":"the means to define, validate, and relate different forms of data.","type":"text"}],"url":"\/documentation\/attributes","type":"topic","title":"Attributes","role":"collection","identifier":"doc:\/\/Attributes\/documentation\/Attributes","kind":"symbol"},"doc://Attributes/documentation/Attributes/ValidationPushProtocol/alphaunderscore()":{"title":"alphaunderscore()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"alphaunderscore","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"PushValidator","kind":"typeIdentifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidationPushProtocol\/alphaunderscore()","role":"symbol","type":"topic","abstract":[{"text":"All characters within a string must be alphabetic (a-z, A-Z), numeric (0-9), or underscores (_).","type":"text"}],"kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"StringProtocol"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/attributes\/validationpushprotocol\/alphaunderscore()"},"doc://Attributes/documentation/Attributes/ValidationPushProtocol":{"abstract":[{"text":"This protocol provides a mechanism for chaining different validators together into a","type":"text"},{"text":" ","type":"text"},{"text":"single validator that can perform a single validation function. This protocol also","type":"text"},{"text":" ","type":"text"},{"text":"forms a basis for defining common validation function such as validating that","type":"text"},{"text":" ","type":"text"},{"text":"collections arenâ€™t empty, or that collections have a specific amount of elements, etc.","type":"text"}],"url":"\/documentation\/attributes\/validationpushprotocol","type":"topic","title":"ValidationPushProtocol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValidationPushProtocol","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidationPushProtocol","navigatorTitle":[{"text":"ValidationPushProtocol","kind":"identifier"}],"kind":"symbol"}}}