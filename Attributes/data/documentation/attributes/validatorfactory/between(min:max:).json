{"metadata":{"role":"symbol","title":"between(min:max:)","symbolKind":"method","roleHeading":"Instance Method","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"between","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"min"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"max"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ValidatorFactory","preciseIdentifier":"s:10Attributes16ValidatorFactoryV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"externalID":"s:10Attributes16ValidatorFactoryVAASLRzlE7between3min3maxACyxGx_xtF","modules":[{"name":"Attributes"}],"extendedModule":"Attributes"},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"between","kind":"identifier"},{"text":"(","kind":"text"},{"text":"min","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"max","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:10Attributes16ValidatorFactoryV","text":"ValidatorFactory","kind":"typeIdentifier","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidatorFactory"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}]}],"kind":"declarations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/attributes\/validatorfactory\/between(min:max:)"]}],"identifier":{"url":"doc:\/\/Attributes\/documentation\/Attributes\/ValidatorFactory\/between(min:max:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Creates a factory that will perform the "},{"type":"codeVoice","code":"between"},{"type":"text","text":" rule. For a full list of rules,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidationPushProtocol","isActive":true},{"type":"text","text":"."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Attributes\/documentation\/Attributes","doc:\/\/Attributes\/documentation\/Attributes\/ValidatorFactory"]]},"sections":[],"references":{"doc://Attributes/documentation/Attributes/ValidatorFactory":{"abstract":[{"text":"A simple interface for chaining together different validators. This factory can be reused to create a","type":"text"},{"text":" ","type":"text"},{"text":"validator that may perform the task of several validators chained together. This factory will","type":"text"},{"text":" ","type":"text"},{"text":"store a function to generate a complex validation rule that can be modified\/altered to work with","type":"text"},{"text":" ","type":"text"},{"text":"other validators. When the user is satisfied with the validation rule, this factory may be used","type":"text"},{"text":" ","type":"text"},{"text":"to generate the validator as many times as required by using the ","type":"text"},{"type":"codeVoice","code":"make"},{"text":" function.","type":"text"}],"url":"\/documentation\/attributes\/validatorfactory","type":"topic","title":"ValidatorFactory","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValidatorFactory","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidatorFactory","navigatorTitle":[{"text":"ValidatorFactory","kind":"identifier"}],"kind":"symbol"},"doc://Attributes/documentation/Attributes":{"abstract":[{"text":"A swift abstraction for defining types of data commonly rendered within a Graphical User Interface (GUI). This package provides","type":"text"},{"text":" ","type":"text"},{"text":"the means to define, validate, and relate different forms of data.","type":"text"}],"url":"\/documentation\/attributes","type":"topic","title":"Attributes","role":"collection","identifier":"doc:\/\/Attributes\/documentation\/Attributes","kind":"symbol"},"doc://Attributes/documentation/Attributes/ValidationPushProtocol":{"abstract":[{"text":"This protocol provides a mechanism for chaining different validators together into a","type":"text"},{"text":" ","type":"text"},{"text":"single validator that can perform a single validation function. This protocol also","type":"text"},{"text":" ","type":"text"},{"text":"forms a basis for defining common validation function such as validating that","type":"text"},{"text":" ","type":"text"},{"text":"collections arenâ€™t empty, or that collections have a specific amount of elements, etc.","type":"text"}],"url":"\/documentation\/attributes\/validationpushprotocol","type":"topic","title":"ValidationPushProtocol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValidationPushProtocol","kind":"identifier"}],"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidationPushProtocol","navigatorTitle":[{"text":"ValidationPushProtocol","kind":"identifier"}],"kind":"symbol"},"doc://Attributes/documentation/Attributes/ValidatorFactory/between(min:max:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"between"},{"kind":"text","text":"("},{"kind":"externalParam","text":"min"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"max"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ValidatorFactory","preciseIdentifier":"s:10Attributes16ValidatorFactoryV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"conformance":{"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidatorFactory\/between(min:max:)","abstract":[{"type":"text","text":"Creates a factory that will perform the "},{"type":"codeVoice","code":"between"},{"type":"text","text":" rule. For a full list of rules,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Attributes\/documentation\/Attributes\/ValidationPushProtocol"},{"type":"text","text":"."}],"kind":"symbol","title":"between(min:max:)","url":"\/documentation\/attributes\/validatorfactory\/between(min:max:)","role":"symbol"}}}